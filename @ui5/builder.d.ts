declare module '@ui5/builder' {
    export {};

    /**
     * Builder
     */
    export namespace builder {
        /**
         * Configures the project build and starts it.
         * @param parameters Parameters
         * @param parameters.tree Project tree as generated by the [@ui5/project.normalizer]{@link module:@ui5/project.normalizer}
         * @param parameters.destPath Target path
         * @param parameters.cleanDest Decides whether project should clean the target path before build
         * @param parameters.buildDependencies Decides whether project dependencies are built as well
         * @param parameters.includedDependencies List of build dependencies to be included if buildDependencies is true
         * @param parameters.excludedDependencies List of build dependencies to be excluded if buildDependencies is true. If the wildcard '*' is provided, only the included dependencies will be built.
         * @param parameters.dev Decides whether a development build should be activated (skips non-essential and time-intensive tasks)
         * @param parameters.selfContained Flag to activate self contained build
         * @param parameters.jsdoc Flag to activate JSDoc build
         * @param parameters.includedTasks List of tasks to be included
         * @param parameters.excludedTasks List of tasks to be excluded. If the wildcard '*' is provided, only the included tasks will be executed.
         * @param parameters.devExcludeProject List of projects to be excluded from development build
         * @returns Promise resolving to <code>undefined</code> once build has finished
         */
        export function build(parameters: {
            tree: object;
            destPath: string;
            cleanDest?: boolean;
            buildDependencies?: boolean;
            includedDependencies?: Array<string | RegExp>;
            excludedDependencies?: Array<string | RegExp>;
            dev?: boolean;
            selfContained?: boolean;
            jsdoc?: boolean;
            includedTasks?: string[];
            excludedTasks?: string[];
            devExcludeProject?: string[];
        }): Promise<undefined>;
    }

    /**
     * processors
     */
    export namespace processors {
        // TODO
    }

    /**
     * tasks
     */
    export namespace tasks {
        // TODO
    }

    /**
     * types
     */
    export namespace types {
        // TODO
    }

    type JSONValue = string | number | boolean | null | JSONValue[] | Record<string, JSONValue>;

    export interface TaskParameters<T extends JSONValue> {
        /**
         * A DuplexCollection to read and write Resources for the project that is currently being built
         */
        workspace: DuplexCollection;

        /**
         * A ReaderCollection to read Resources of the project's dependencies
         */
        dependencies: ReaderCollection;

        /**
         * Options
         */
        options: {
            /**
             * The name of the project currently being built. Example: my.library
             */
            projectName: string;

            /**
             * The namespace of the project. Example: my/library
             */
            projectNamespace: string;

            /**
             * The task configuration as defined in the project's ui5.yaml. See Configuration
             */
            configuration: T;
        };

        /**
         * Specification Version dependent interface to a TaskUtil instance
         */
        taskUtil?: TaskUtilInterface;
    }

    interface TaskUtilInterface {
        /**
         * Standard Tags
         */
        STANDARD_TAGS: Record<string, string>;

        /**
         * Stores a tag with value for a given resource's path. Note that the tag is independent of the supplied resource instance.
         * For two resource instances with the same path, the same tag value is returned.
         * If the path of a resource is changed, any tag information previously stored for that resource is lost.
         *
         * This method is only available to custom task extensions defining Specification Version 2.2 and above.
         *
         * @param resource - The resource the tag should be stored for
         * @param tag - Name of the tag. Currently only the STANDARD_TAGS are allowed
         * @param value - Tag value. Must be primitive
         */
        setTag(resource: Resource, tag: string, value?: string | boolean | number = true): void;

        /**
         * Clears the value of a tag stored for the given resource's path. It's like the tag was never set for that resource.
         *
         * This method is only available to custom task extensions defining Specification Version 2.2 and above.
         *
         * @param resource - The resource the tag should be cleared for
         * @param tag - Tag
         */
        clearTag(resource: Resource, tag: string): void;

        /**
         * Retrieves the value for a stored tag. If no value is stored, undefined is returned.
         *
         * This method is only available to custom task extensions defining Specification Version 2.2 and above.
         *
         * @param resource - The resource the tag should be retrieved for
         * @param tag - Name of the tag
         * @returns Tag value for the given resource. undefined if no value is available
         */
        getTag(resource: Resource, tag: string): string | boolean | number | undefined;

        /**
         * Check whether the project currently being built is the root project.
         *
         * This method is only available to custom task extensions defining Specification Version 2.2 and above.
         *
         * @returns true if the currently built project is the root project
         */
        isRootProject(): boolean;

        /**
         * Register a function that must be executed once the build is finished.
         * This can be used to, for example, clean up files temporarily created on the file system.
         * If the callback returns a Promise, it will be waited for.
         * It will also be executed in cases where the build has failed or has been aborted.
         *
         * This method is only available to custom task extensions defining Specification Version 2.2 and above.
         *
         * @param callback - Callback to register. If it returns a Promise, it will be waited for
         */
        registerCleanupTask(callback: () => void | Promise<void>): void;
    }

    export type TaskFunction<T> = (params: TaskParameters<T>) => Promise<undefined>;
}
